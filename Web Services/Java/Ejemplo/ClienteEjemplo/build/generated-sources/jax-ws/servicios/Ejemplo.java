
package servicios;

import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.Action;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.6-1b01 
 * Generated source version: 2.2
 * 
 */
@WebService(name = "ejemplo", targetNamespace = "http://servicios/")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface Ejemplo {


    /**
     * 
     * @param a
     * @param b
     * @return
     *     returns double
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "dividir", targetNamespace = "http://servicios/", className = "servicios.Dividir")
    @ResponseWrapper(localName = "dividirResponse", targetNamespace = "http://servicios/", className = "servicios.DividirResponse")
    @Action(input = "http://servicios/ejemplo/dividirRequest", output = "http://servicios/ejemplo/dividirResponse")
    public double dividir(
        @WebParam(name = "a", targetNamespace = "")
        double a,
        @WebParam(name = "b", targetNamespace = "")
        double b);

    /**
     * 
     * @param a
     * @param b
     * @return
     *     returns double
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "sumar", targetNamespace = "http://servicios/", className = "servicios.Sumar")
    @ResponseWrapper(localName = "sumarResponse", targetNamespace = "http://servicios/", className = "servicios.SumarResponse")
    @Action(input = "http://servicios/ejemplo/sumarRequest", output = "http://servicios/ejemplo/sumarResponse")
    public double sumar(
        @WebParam(name = "a", targetNamespace = "")
        double a,
        @WebParam(name = "b", targetNamespace = "")
        double b);

    /**
     * 
     * @param nombre
     * @return
     *     returns java.lang.String
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "saludar", targetNamespace = "http://servicios/", className = "servicios.Saludar")
    @ResponseWrapper(localName = "saludarResponse", targetNamespace = "http://servicios/", className = "servicios.SaludarResponse")
    @Action(input = "http://servicios/ejemplo/saludarRequest", output = "http://servicios/ejemplo/saludarResponse")
    public String saludar(
        @WebParam(name = "nombre", targetNamespace = "")
        String nombre);

    /**
     * 
     * @param a
     * @param b
     * @return
     *     returns double
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "restar", targetNamespace = "http://servicios/", className = "servicios.Restar")
    @ResponseWrapper(localName = "restarResponse", targetNamespace = "http://servicios/", className = "servicios.RestarResponse")
    @Action(input = "http://servicios/ejemplo/restarRequest", output = "http://servicios/ejemplo/restarResponse")
    public double restar(
        @WebParam(name = "a", targetNamespace = "")
        double a,
        @WebParam(name = "b", targetNamespace = "")
        double b);

    /**
     * 
     * @param a
     * @param b
     * @return
     *     returns double
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "multiplicar", targetNamespace = "http://servicios/", className = "servicios.Multiplicar")
    @ResponseWrapper(localName = "multiplicarResponse", targetNamespace = "http://servicios/", className = "servicios.MultiplicarResponse")
    @Action(input = "http://servicios/ejemplo/multiplicarRequest", output = "http://servicios/ejemplo/multiplicarResponse")
    public double multiplicar(
        @WebParam(name = "a", targetNamespace = "")
        double a,
        @WebParam(name = "b", targetNamespace = "")
        double b);

}
